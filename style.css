body {
  /* overrides margin applied by user-agent */
  margin: 0;
  /* It's common to add the main font and body text styles to the body element so they are inherited by all the text 
     elements on the page. */
  font-family: "Courier New", Courier, monospace;
}

/* This is the order you should specifiy the pseudoclasses for links */
/* The cascade is the reason this order matters. They all have the same specificity, so source order determines what 
   overrides what. */
a:link {
  background-color: blue;
  color: white;
  text-decoration: initial;
  padding: 2px;
}

a:visited {
  background-color: purple;
}

a:hover {
  background-color: transparent;
  color: blue;
  text-decoration: underline;
}

a:active {
  color: red;
}

/* When two or more selectors target the same element and have declarations for the same property it creates a 
declaration conflict. */

/* To determine which will win out the browser utilizes a set of rules (the cascade), this keeps results predictable */

/* The rules are:
1. style orignin: whichever has the highest-priority origin wins, else...
* there are three style origin types. author styles, user styles, and user-agent styles. 
Author styles are the styles written by the developer. user styles are added into the document by a user through the browser
and user-agent styles are the default styles applied by the browser. 
* The priority of origins is as follows... author, user, user-agent
2. inline-styles: if one is an inline style and the other isnt it wins, else...
3. layer: whichever is defined in highest priority scope wins, else...
4. specificity: whichever has selector with highest specificity wins, else...
5. scope proximity: whichever has highest priority scope wins, else...
6. whichever comes last in source order wins.  */
h1 {
  /* important makes a declaration a higher priority origin. However, user-agent important styles override, user important,
    whereas user important overrides inline important, whereas inline important overrides author style important. The only thing
    that overrides user-agent important is the transition property. */
  font-family: serif !important;
}
#page-title {
  font-family: sans-serif;
}
.title {
  font-family: monospace;
}

/* Overrides user-agent styles */
.nav {
  padding: 0;
  list-style: none;
}

.nav li {
  display: inline-block;
  cursor: pointer;
}

/* #main-nav a {
  text-decoration: none;
  color: white;
  padding: 0.5em 1.5em;
  background-color: teal;
} */

/* lowered specificity (option 3) */
.nav a {
  text-decoration: none;
  color: white;
  padding: 0.5em 1.5em;
  background-color: teal;
}

/* This wont override the above declaration because the selector is less specific. */
/* Any number of ID's overrides any number of classes which overrides any number of type selectors */
/* pseudo-classes and attribute selectors have the same specificiy as classe. pseudo elements have the same as
   type selectors. universal selector and combinators (+, >, ~) have no specificity.  */

/* .featured {
  background-color: orange;
} */

/* When you run into declaration conflicts due to specificity like above, you have a few options to solve it. */

/* Option 1: use !important to make the declaration a higher priority origin. */
/* This is a bad solution, because if you start using !important everywhere, what happens if you need to override something
   that already has it? When two declarations origins match youre back to relying on specificity. */

/* .featured {
  background-color: orange !important;
} */

/* Option 2: make the selector you want to win more specific. This is better, but as our styles get more complex well start
   having running into this issue of having to make our selectors more and more complex for them to be able to win out. */

/* #main-nav .featured {
  background-color: orange;
} */

/* Option 3: even better would to try to just lower the specificity of the selector you dont want to win before increasing
   the specificity of the one you do. That way you only have to increase the new one as minimally as possible. */
/* In larger projects specificity becomes a sort of arms race. It's best to keep specificity as low as is practical so
   So that when you need to override something later your options are open.  */

/* .nav .featured {
  background-color: orange;
} */

/* Option 4: make the specificity the same so you can utilize source order. This solves the specificity arms race problem
   But now, if we want to use the featured class on a tags elsewhere on the page they'll come out only partially styeld.
   Be careful about getting too general with selectors. Youll end up needing styles to support them elsewhere on the page*/

/* This is a compound selector. It says "match a tags with a featured class" */
a.featured {
  background-color: orange;
}

/* Overrall, if youll be reusing a class across the page option 4 is best, along with some additional styles to support it
   where it's used. Otherwise, option 3 is best. */

/* There are two common rules of thumb when working with the cascade. Don't use ID's and dont use !important. These both
   make things difficult to override. Nowadays theyre acceptable in certian situations, such as with layers and scope. */

/* A  declaration that wins the cascade battle is a cascade value. It's a value applied to a property of an elment as a result
   of the cascade. If a property is never specified it has no cascade value*/

/* The last way a an element can recieve styles is through inheritance. */
/* If an element has no cascaded value for a given property, it may then inherit a value from its parent element */

/* There are four values you can apply to any property that will manipulate the cascade. */
/* initial, inherit, unset, and revert */

/* Sometimes you want inheritance to take place where a cascaded value is preventing it. You would use the inherit keyword */
.footer {
  color: #666;
  background-color: #ccc;
  padding: 15px 0;
  text-align: center;
  font-size: 14px;
}

/* We want the color to inherit, but instead of recieving the cascade style from the link ruleset above. */
/* The benefit is now the link will change with the footer if anything alters it. Thats why youre not just hardcoding
   a color here. */
/* You can also use inherit to force inheritance for properties that usually don't. */
/* .footer a {
  color: inherit;
  background-color: transparent;
  text-decoration: underline;
} */

/* If you want to revert a property to it's default value you can use initial. This allows you to not have to think
   about what the initial value of a property is if you want to revert back to it. Keep in mind, this isnt the value
   applied by the user-agent, it's the one defined as default in the spec. */
.footer a {
  background-color: initial;
}

/* unset is a combo of inherit and initial. It says inheritable properties to inherit, and noninheritable ones to initial */
.footer a {
  /* sets the value to initial */
  background-color: unset;
  /* sets the value to inherit */
  color: unset;
}

/* revert initial and unset override all styles from author and user-agent style sheets. Sometimes you want to override.
   Just the author styles and leave user-agent ones intact. This is where revert comes into play. */
.footer a {
  /* If we used initial here the value would be none because that's the default for this property. The underline is actually
     set by the user-agent, so we need to use revert. */
  text-decoration: revert;
}

/* Be careful about shorthands overriding omitted values, even if you ommit them under the hood theyre just set to initial */
h1 {
  font-weight: bold;
}

.title {
  font: 32px Helvetica, Arial, sans-serif;
}

.nav .featured {
  background-color: orange;
  /* Four value shorhands order things y,x. Two value x,y. */
  box-shadow: 10px 2px #6f9090;
}

/* Adding a feature query allows you to specify styles if a browser supports them, otherwise fallback styles are implemented */
/* This is the fallback behavior for legacy browsers */
.coffees {
  margin: 20px 0;
}

.coffees a {
  display: inline-block;
  min-width: 300px;
  padding: 10px 15px;
  margin: 0 10px 10px 0;
  color: black;
  background-color: initial;
  border: 1px solid grey;
  border-radius: 5px;
}

/* feature query that targets only browsers that understand grid layout */
@supports (display: grid) {
  /* Defines grid layout for modern browsers */
  .coffees {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 10px;
  }

  /* Overrides unnecessary fallback styles we don't want for our grid */
  .coffees a {
    margin: unset;
    min-width: unset;
  }
}

/* feature queries also have syntax that queries when a browser doesnt support a feature, syntax for when a browser supports 
either one specified feature OR another specified feature, syntax for when a browser supports both of two specified features,
and syntax for when a browser supports a specific selector. */

/* @supports not (display:grid){} */

/* @supports (display:grid) or (display:flex){} */

/* @supports (display:grid) and (display:flex){} */

/* @supports selectorr (:user-invalid){} */

/* Progressive enhancement like this where a feature can be utilized or not depending on the browser is a feature of the
   language called resiliance. It enables CSS to be fault tolerant. This is important for keeping our code up to date 
   with new features while not breaking it in older browsers. */

/* If youd like to experiment with experimental features of CSS that havent been resolved in the spec yet you type 
   chrome://flags into the web browser so you can enable them. For firefox download firefox dev edition. */

/* How does the browser determine which styles are applied to which elements? It follows the rules of the cascade. */
/* How is a selectors specificity determined? The number of ID's, classes, and tagnames in the selector. */
/* When what happens for certain properties when no cascaded value is present? They inherit the value from their parent */
/* What's the difference between unset and revert? Unset undoes styles provided for that property either setting the style
   back to the default for that property denoted in the spec or making it inherit from it's parent depending on whether its
   an inheritable property or not; whereas revert sets the style back to what was provided by the user-agent.*/
/* Why use shorthand properties? They allow a concise way to set values for multiple related properties at once.*/
/* Why use progressive enhancement? It allows us to utilize cutting edge css functionality without breaking our app in 
   older browsers. */
